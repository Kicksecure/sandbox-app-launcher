#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -e

while :
do
      case $1 in
      setup)
        setup_sandbox="1"
        shift
        break
        ;;
      start)
        start_program="1"
        shift
        break
        ;;
      remove)
        remove="1"
        shift
        break
        ;;
      help)
        echo "Usage: sandbox-app-launcher [OPTION] [APPLICATION]

  setup       Setup the sandbox for the application.
  start       Execute the application within the sandbox.
  remove      Remove all application data and configuration files.

Examples:
  sandbox-app-launcher setup firefox
  sandbox-app-launcher start firefox
  sandbox-app-launcher remove firefox"
        exit
        ;;
      *)
        echo "ERROR: Invalid argument. See the 'help' command for details."
        exit 1
        ;;
      esac
done

app_name="${1}"
shift 1
: ${app_path:="$(type -P "${app_name}" || true)"}

if ! [[ "${app_name}" =~ [0-9a-zA-Z/] ]]; then
   echo "ERROR: Invalid character in app_name." >&2
   exit 1
fi

if ! [[ "${app_path}" =~ [0-9a-zA-Z/] ]]; then
   echo "ERROR: Invalid character in app_path." >&2
   exit 1
fi

main_app_dir="/usr/share/sandbox-app-launcher"
auto_dir="/var/cache/sandbox-app-launcher-autogenerated"
wrapper_dir="${auto_dir}/wrappers"
wrapper_dir_wx="${wrapper_dir}-wx"
appdata_dir="/home/sandbox-app-launcher-appdata"
app_user="sal-${app_name}"
app_homedir="${appdata_dir}/${app_name}"
seccomp_filter="${auto_dir}/seccomp-filter.bpf"
shared_dir="${appdata_dir}/shared"
bwrap_args=""

if [ "${app_name}" = "torbrowser" ]; then
  app_path="${app_homedir}/.tb/tor-browser/Browser/start-tor-browser"
fi

if ! [ -x "${app_path}" ] && ! [ "${app_name}" = "torbrowser" ]; then
  echo "ERROR: Could not find '${app_name}' in \$PATH." >&2
  exit 1
fi

if [ "${app_name}" = "shared" ]; then
  echo "ERROR: The app name cannot be 'shared'." >&2
  exit 1
fi

if [ -f "/etc/sandbox-app-launcher/${app_name}.conf" ]; then
  . "/etc/sandbox-app-launcher/${app_name}.conf"
fi

## Optionally allow dynamic native code execution.
##
## This allows creating memory mappings that are both
## writable and executable, allows transitioning a
## writable memory mapping to executable and allows
## executing programs from writable directories i.e.
## violating W^X.
##
## This is generally a security issue since it allows an
## attacker to execute new arbitrary code so preventing this
## will force the attacker to use the already existing code
## (ROP/JOP) which is far more limited.
##
## Although, some things require this such as JIT engines in
## browsers so it must be optional.
if [ "${allow_dynamic_native_code_exec}" = "yes" ]; then
  seccomp_filter="${auto_dir}/seccomp-filter-wx.bpf"
  wrapper_dir="${wrapper_dir_wx}"
fi

if [ "$(id -u)" = "0" ]; then
  sal_is_run_with_root=true
fi

error_handler() {
  echo "
## sandbox-app-launcher BUG.
## BASH_COMMAND: ${BASH_COMMAND}
## Please report this BUG!
" >&2
  exit 1
}

trap "error_handler" ERR

kill_processes_inside_sandbox() {
  pids="$(pgrep --uid="${app_user}" 2>/dev/null)" || true
  if [ "$pids" = "" ]; then
     return 0
  fi

  ## Don't leave any left-over processes such as the D-Bus daemon.
  killall -9 -u "${app_user}"

  ## Cannot use bash built-in `wait` since that would fail if command is run
  ## from a different shell.
  ## /usr/bin/sandbox-app-launcher: line 129: wait: pid 12973 is not a child of this shell
  #wait $pids

  ## This is not the cleanest way. Would be better if there was a tool
  ## that can block until a list of pids has terminated to avoid a hardcoded
  ## `sleep 0.2`.
  while true ; do
    ## `ps` will exit 0 if at least one pid is still running.
    ## `ps` will exit 1 if no pid not even one is running.
    ## Examples:
    ##
    ## `ps --no-header -p 1` -> exit code: 0
    ##
    ## pid 1 really exists.
    ## pid 555555 does not exist.
    ## `ps --no-header -p 1 555555` -> exit code: 0
    ## ps still exit 0.
    if ! ps --no-header -p $pids &>/dev/null ; then
      break
    fi
    sleep 0.2 &
    ## Non-blocking. Process even loop such as signals.
    wait "$!"
  done
}

run_if_root() {
  if [ "${sal_is_run_with_root}" = "true" ]; then
    "${@}"
  else
    echo "ERROR: The setup for this program is incomplete. To fix, please execute:

sudo sandbox-app-launcher setup ${app_name}

(Debugging information: ${@})" >&2
    exit 1
  fi
}

setup() {
  if ! [ "${sal_is_run_with_root}" = "true" ]; then
    echo "ERROR: The setup must be run as root." >&2
    exit 1
  fi
  setup_or_check
  echo "INFO: Done, setup complete, OK."
}

setup_or_check() {
  for dir in "${main_app_dir}" "${auto_dir}" "${wrapper_dir}" "${wrapper_dir_wx}" "${appdata_dir}"; do
    ## Check if the required directories exist.
    if ! [ -d "${dir}" ]; then
      echo "ERROR: Directory '${dir}' does not exist. This package was not installed properly." >&2
      exit 1
    fi
    if ! [ "$(stat -c %a "${dir}")" = "755" ]; then
      ## Fix permissions.
      run_if_root chmod 755 "${dir}"
    fi
  done

  ## Check if the shared directory exists.
  if ! [ -d "${shared_dir}" ]; then
    echo "ERROR: Directory '${shared_dir}' does not exist. This package was not installed properly." >&2
    exit 1
  fi
  if ! [ "$(stat -c %a "${shared_dir}")" = "1777" ]; then
    ## Fix permissions.
    run_if_root chmod 1777 "${shared_dir}"
  fi

  ## Create the user that the sandboxed application will run as.
  if ! getent passwd | sed -e 's/:.*//g' | grep -qw "${app_user}"; then
    ## Use 'adduser' on Debian or Ubuntu systems but 'useradd' on other systems
    ## for portability.
    ## https://github.com/madaidan/sandbox-app-launcher/issues/9
    if grep --quiet --invert-match --extended-regexp 'NAME="Debian|NAME="Ubuntu' /etc/os-release; then
      run_if_root adduser --home "${app_homedir}" --no-create-home --disabled-login --gecos "" "${app_user}" >/dev/null
    else
      run_if_root useradd --home-dir "${app_homedir}" --no-create-home "${app_user}" >/dev/null
    fi
  fi

  if ! [ -d "${app_homedir}" ]; then
    run_if_root mkdir -m 700 --parents "${app_homedir}"
  fi

  if ! [ "$(stat -c "%U" "${app_homedir}")" = "${app_user}" ]; then
    run_if_root chown --recursive "${app_user}" "${app_homedir}"
  fi

  if ! [ "$(stat -c %a "${app_homedir}")" = "700" ]; then
    ## command:
    ## find /home/sandbox-app-launcher-appdata/torbrowser/.tb/tor-browser -executable -type f
    ## output:
    ## /home/sandbox-app-launcher-appdata/torbrowser/.tb/tor-browser/start-tor-browser.desktop
    ## /home/sandbox-app-launcher-appdata/torbrowser/.tb/tor-browser/Browser/libmozavcodec.so
    ## ...
    #run_if_root chmod --recursive 700 "${app_homedir}"
    ## Therefore do not use --recursive.
    run_if_root chmod 700 "${app_homedir}"
  fi

  ## https://forums.whonix.org/t/system-wide-sandboxing-framework-sandbox-app-launcher/9008/311
  if ! test -f /etc/machine-id ; then
    run_if_root touch /etc/machine-id
  fi
}

run_program() {
  setup_or_check

  ## TODO: X11 sandbox - not needed if we switch to wayland
  ## TODO: Network namespace - probably via ip netns
  ## TODO: Don't preserve the environment - env -i

  ## Optionally remove network access by creating an empty net namespace.
  if [ "${allow_net}" = "no" ]; then
    bwrap_args+="--unshare-net "
  fi

  ## Optionally allow webcam access.
  if [ "${allow_webcam}" = "yes" ]; then
    for device in /dev/video*
    do
      if [ -f "${device}" ]; then
        bwrap_args+="--dev-bind-try ${device} ${device} "
      fi
    done
  fi

  ## Optionally allow microphone access.
  if [ "${allow_mic}" = "yes" ]; then
    bwrap_args+="--dev-bind-try /dev/snd /dev/snd "
  fi

  ## Shared storage.
  if [ "${shared_storage}" = "read-write" ]; then
    bwrap_args+="--bind ${shared_dir} ${shared_dir} --bind /shared /shared "
  elif [ "${shared_storage}" = "read-only" ]; then
    bwrap_args+="--ro-bind ${shared_dir} ${shared_dir} --ro-bind /shared /shared "
  fi

  ## Install Tor Browser.
  if [ "${app_name}" = "torbrowser" ]; then
    if ! [ -d "${app_homedir}/.tb" ]; then
      ## Use tb-starter (by Whonix developers) to install Tor Browser.
      sudo --set-home --user="${app_user}" HOME="${app_homedir}" tb_no_start=true tb_installer_started_by_sandbox_app_launcher=true torbrowser
    fi
    bwrap_args+="--ro-bind-try /run/anon-ws-disable-stacked-tor/127.0.0.1_9150.sock /run/anon-ws-disable-stacked-tor/127.0.0.1_9150.sock "
    bwrap_args+="--ro-bind-try /run/anon-ws-disable-stacked-tor/127.0.0.1_9151.sock /run/anon-ws-disable-stacked-tor/127.0.0.1_9151.sock "
  fi

  wrapper_script="/usr/share/sandbox-app-launcher/wrapper-script"

  ## Debugging.
  if [ -o xtrace ]; then
    ## read by wrapper_script
    sandbox_app_launcher_debug=true
  else
    sandbox_app_launcher_debug=false
  fi

  ## variables app_path and sandbox_app_launcher_debug are read by wrapper_script.

  sudo \
    --set-home \
    --user="${app_user}" \
    sandbox_app_launcher_debug="$sandbox_app_launcher_debug" \
    app_path="$app_path" \
    bash -c "
  bwrap \
  --ro-bind /bin /bin \
  --ro-bind /usr/bin /usr/bin \
  --ro-bind /lib /lib \
  --ro-bind-try /lib32 /lib32 \
  --ro-bind-try /lib64 /lib64 \
  --ro-bind /usr/lib /usr/lib \
  --ro-bind-try /usr/local/lib /usr/local/lib \
  --ro-bind /usr/share /usr/share \
  --ro-bind-try /usr/local/share /usr/local/share \
  --ro-bind /usr/include /usr/include \
  --ro-bind /etc /etc \
  --ro-bind-data 10 /etc/passwd \
  --ro-bind-data 11 /etc/group \
  --ro-bind ${main_app_dir}/machine-id /etc/machine-id \
  --ro-bind /var/lib /var/lib \
  --tmpfs /var/lib/dbus \
  --ro-bind ${main_app_dir}/machine-id /var/lib/dbus/machine-id \
  --ro-bind /sys/devices /sys/devices \
  --ro-bind /sys/class /sys/class \
  --ro-bind /sys/bus /sys/bus \
  --ro-bind /sys/fs/cgroup /sys/fs/cgroup \
  --bind ${app_homedir} ${app_homedir} \
  --proc /proc \
  --tmpfs /tmp \
  --ro-bind-try /tmp/.X11-unix /tmp/.X11-unix \
  --tmpfs /var/tmp \
  --tmpfs /var/cache \
  --ro-bind ${wrapper_script} ${wrapper_script} \
  --ro-bind ${app_path} ${app_path} \
  --tmpfs /run \
  --symlink /run /var/run \
  --dev /dev \
  --chdir ${app_homedir} \
  --setenv HOME ${app_homedir} \
  --setenv USER ${app_user} \
  --setenv LOGNAME ${app_user} \
  --setenv XAUTHORITY ${app_homedir}/.Xauthority \
  --setenv SHELL /sbin/nologin \
  --setenv started_by_sandbox_app_launcher true \
  --unsetenv SUDO_USER \
  --unsetenv SUDO_UID \
  --unsetenv SUDO_GID \
  --unsetenv SUDO_COMMAND \
  --unsetenv OLDPWD \
  --unsetenv MAIL \
  --unshare-ipc \
  --unshare-pid \
  --unshare-cgroup \
  --unshare-uts \
  --hostname host \
  --new-session \
  --cap-drop all \
  --seccomp 12 \
  10< <(getent passwd root ${app_user} nobody) \
  11< <(getent group root ${app_user} nobody) \
  12< ${seccomp_filter} \
  ${bwrap_args} \
  ${wrapper_script} ${@}"

  kill_processes_inside_sandbox

  true "OK"
}

remove_app() {
  if ! [ "${sal_is_run_with_root}" = "true" ]; then
    echo "ERROR: The removal process must be run as root." >&2
    exit 1
  fi

  kill_processes_inside_sandbox

  if getent passwd | grep -q "${app_user}"; then
    userdel --remove --force "${app_user}"
  else
    echo "INFO: User '${app_user}' does not exist, probably already removed earlier, OK."
  fi

  echo "INFO: Done, removal complete, OK."
}

if [ "${setup_sandbox}" = "1" ]; then
  setup
elif [ "${start_program}" = "1" ]; then
  if sudo --set-home --user="${app_user}" test -d "${app_homedir}" ; then
    run_program "${@}"
  else
    echo "ERROR: The sandbox for this program has not been set up yet. Please execute:

sudo sandbox-app-launcher setup ${app_name}" >&2
  fi
elif [ "${remove}" = "1" ]; then
  remove_app
fi
